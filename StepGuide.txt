O AUTH PROJECT -NODE REACT TS

[SECTION 1: PROJECT SET UP]
1. Create folder for client and server

[SERVER]
1. Initialize node by running npm init script -y
2. Install required node packages, also instal the same instance of it for typescript runn : npm insatall -D @types, in devDependencies
   npm install express dotenv passport passport-google-oauth20 pg bcryptjs jsonwebtoken cors
   npm install -D typescript @types/node @types/express @types/passport @types/passport-google-oauth20 ts-node nodemon
3. Run npx tsc --init command which will generate a tsconfig.json file, set the otdie to ./dist and rootdir to ./src
4. create a src folder in which create a index.ts file
5. in package .json, add scripts for run build and dev
6. crea folder dor config, middleware and routs, create gitignore and .env files
7. Setup express, port , cors and other required middle ware in index ts
8. Setup db in config

[SECTION: SESSION AND GOOGLE OAUTH]
1. Import ecpress session and passport in index.ts
2. Set up session, and passport as middleware
3. careate passport.ts which uses GoogleStartegy, use the Google startegy, use the interface for user, serialize and deserialize the user
4. Create a authhRout.ts, which will include route for /google redirects to the sign in page with scope profile and image and /google/callback has success and faliuire redirects
5. create a protectedRoutets, creat a isAuthenticated middle ware which checks if the user is authenticated
6. create types folder in it create a express folder init create index.d.ts
   this file will declare global namespace for express which will extend Express.User to the USer Iinterface that is created
7. [Only data defined in user interface will be available to be shown in req.user]